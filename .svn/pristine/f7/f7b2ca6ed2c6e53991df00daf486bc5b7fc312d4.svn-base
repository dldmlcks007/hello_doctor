package kr.or.ddit.controller;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.command.CoRegistCommand;
import kr.or.ddit.command.SearchCriteria;
import kr.or.ddit.dto.ChartPicFileVO;
import kr.or.ddit.dto.CoDocApproveVO;
import kr.or.ddit.dto.CoDoctorListVO;
import kr.or.ddit.dto.CoSubTaskVO;
import kr.or.ddit.dto.CoTaskASubVO;
import kr.or.ddit.dto.ComRecoVO;
import kr.or.ddit.dto.DidApproveVO;
import kr.or.ddit.dto.DoctorVO;
import kr.or.ddit.dto.IssueVO;
import kr.or.ddit.dto.JoinCooperVO;
import kr.or.ddit.dto.LastChartFileVO;
import kr.or.ddit.dto.LastPrescriptVO;
import kr.or.ddit.dto.MajorVO;
import kr.or.ddit.dto.MyHistoryCommentVO;
import kr.or.ddit.dto.MyIssueVO;
import kr.or.ddit.dto.NotiVO;
import kr.or.ddit.dto.ReserveHistoryVO;
import kr.or.ddit.service.CoMedService;
import kr.or.ddit.service.CooperMainService;
import kr.or.ddit.service.CooperMyService;
import kr.or.ddit.service.DoctorService;
import kr.or.ddit.service.MediRecoService;

@Controller
@RequestMapping("/cooperation") // 대분류
public class CooperationController {

	HttpSession session = null;

	@Resource(name = "recoFilePath")
	private String recoFilePath;
	@Autowired
	private CooperMainService service;
	@Autowired
	private CooperMyService myService;

	@Autowired
	private CoMedService coMedService;

	@Autowired
	private MediRecoService mediRecoService;

	@Autowired
	private DoctorService doctorService;

	@RequestMapping("/test")
	public String test() {
		String url = "cooperation/test";

		return url;
	}

	@RequestMapping("/request") // 기능
	public String request() {
		String url = "cooperation/request";
		return url;
	}

	@RequestMapping("/requestDeny") // 기능
	public String request_deny() {
		String url = "cooperation/requestDeny";
		return url;
	}

	@RequestMapping("/requestPermit") // 기능
	public String request_permit() {
		String url = "cooperation/requestPermit";
		return url;
	}

	@RequestMapping("/detail")
	public ModelAndView cooperdetail(String coNo, ModelAndView mnv, HttpServletRequest request) throws SQLException {
		String url = "cooperation/cooperdetail";
		// System.out.println("coNo ==>"+coNo);
		// ta_status 1:승인 0:미승인
		session = request.getSession();
		DoctorVO doctorLogin = (DoctorVO) session.getAttribute("doctorLogin");
		String dId = doctorLogin.getdId();
		// 해당 협진의 전체진료
		List<CoTaskASubVO> coTaskList = myService.selectCoTaskList(coNo);
		System.out.println("협진번호:" + coNo + "전체진료리스트:" + coTaskList);
		// 진행도 구하기
		for (CoTaskASubVO vo : coTaskList) {
			if (vo.getSubTaskList() != null && !vo.getSubTaskList().isEmpty()) { // 하위업무가있으면
				// 전체 갯수
				int totalSubTask = vo.getSubTaskList().size();
				System.out.println("controller전체갯수:" + totalSubTask);
				System.out.println("controllery인것의 갯수 " + vo.getSubTaskCount());
				// 진행도
				double progress = ((double) vo.getSubTaskCount() / totalSubTask) * 100;

				System.out.println("소숫점" + progress);
				System.out.println("controller진행도" + progress);
				vo.setProgressPercentage((int) progress);
				System.out.println(vo.getProgressPercentage());
			}
		}
		mnv.addObject("coTaskList", coTaskList);

		// 진료히스토리 구하기
		List<ReserveHistoryVO> historyList = myService.selectHistoryList(coNo);
		mnv.addObject("historyList", historyList);

		// 해당협진 환자의 가장 최근 진료기록
		ComRecoVO selectLast = myService.selectLast(coNo);
		mnv.addObject("selectLast", selectLast);
		String mNo = selectLast.getmNo();

		// 의료사진
		List<ChartPicFileVO> chartPicList = myService.selectChartPicFile(mNo);
		mnv.addObject("chartPicList", chartPicList);
		// 가장최근진료기록에 대한 의료기록 파일정보
		List<LastChartFileVO> chartFileList = myService.selectChartFile(mNo);
		mnv.addObject("chartFileList", chartFileList);

		// 처방전
		List<LastPrescriptVO> lastPreList = myService.selectLastPrescript(mNo);
		System.out.println("처방전==>" + lastPreList);

		mnv.addObject("lastPreList", lastPreList);
//특이사항리스트
		List<MyIssueVO> myIssueList = myService.myIssueList(coNo);
		mnv.addObject("myIssueList", myIssueList);
//의료진 눌렀을 때 리스트 띄우기
		List<CoDoctorListVO> coDocList = myService.coDocList(coNo);
		for (CoDoctorListVO vo : coDocList) {
			// 1:진료중 2:수술 3:자리비움
			if (vo.getStatus() == 1)
				vo.setStatusResult("진료중");
			if (vo.getStatus() == 2)
				vo.setStatusResult("수술중");
			if (vo.getStatus() == 3)
				vo.setStatusResult("자리비움");
		}
		mnv.addObject("coDocList", coDocList);

		mnv.addObject("coNo", coNo);
		mnv.addObject("dId", dId);
		mnv.setViewName(url);
		return mnv;

	}

//전체진료에서 체크박스 눌렀을 때!
	@ResponseBody
	@RequestMapping(value = "/myTaskChecked", method = RequestMethod.POST)
	public ResponseEntity<List<CoTaskASubVO>> myTaskChecked(HttpServletRequest request, String coNo)
			throws SQLException {

		System.out.println("mytaskchecked오나요?");
		System.out.println("controller coNo:" + coNo);
		ResponseEntity<List<CoTaskASubVO>> entity = null; // 해당 협진의 전체진료

		// 해당 협진의 전체진료
		List<CoTaskASubVO> coTaskList = myService.selectCoTaskList(coNo);
		System.out.println("협진번호:" + coNo + "전체진료리스트:" + coTaskList);
		// 진행도 구하기
		for (CoTaskASubVO vo : coTaskList) {
			if (vo.getSubTaskList() != null && !vo.getSubTaskList().isEmpty()) { // 하위업무가있으면
				// 전체 갯수
				int totalSubTask = vo.getSubTaskList().size();
				System.out.println("controller전체갯수:" + totalSubTask);
				System.out.println("controllery인것의 갯수 " + vo.getSubTaskCount());
				// 진행도
				double progress = ((double) vo.getSubTaskCount() / totalSubTask) * 100;

				System.out.println("소숫점" + progress);
				System.out.println("controller진행도" + progress);
				vo.setProgressPercentage((int) progress);
				System.out.println(vo.getProgressPercentage());
			}
		}

		// 세션id랑 리스트의 vo와 같으면 리스트를 넘겨준다. session = request.getSession();
		DoctorVO doctorLogin = (DoctorVO) session.getAttribute("doctorLogin");
		String dId = doctorLogin.getdId();
		List<CoTaskASubVO> myTaskCheckedList = new ArrayList<CoTaskASubVO>();

		for (CoTaskASubVO vo : coTaskList) {
			if (vo.getdId().equals(dId)) { // 세션 id랑 같으면
				myTaskCheckedList.add(vo);
				System.out.println("taDate==>" + vo.getTaDate());
				System.out.println("진행도==>" + vo.getProgressPercentage());

			}
		}
		System.out.println("myTaskCheckedList" + myTaskCheckedList);
		entity = new ResponseEntity<List<CoTaskASubVO>>(myTaskCheckedList, HttpStatus.OK);
		return entity;
	}

	// 전체진료에서 체크박스 언체크!했을 때
	@ResponseBody
	@RequestMapping(value = "/myTaskUnChecked", method = RequestMethod.POST)
	public ResponseEntity<List<CoTaskASubVO>> myTaskUnChecked(HttpServletRequest request, String coNo)
			throws SQLException {

		System.out.println("mytaskUnchecked오나요?");
		System.out.println("controller coNo:" + coNo);
		ResponseEntity<List<CoTaskASubVO>> entity = null; // 해당 협진의 전체진료

		// 해당 협진의 전체진료
		List<CoTaskASubVO> coTaskList = myService.selectCoTaskList(coNo);
		System.out.println("협진번호:" + coNo + "전체진료리스트:" + coTaskList);

		// 진행도 구하기
		for (CoTaskASubVO vo : coTaskList) {
			if (vo.getSubTaskList() != null && !vo.getSubTaskList().isEmpty()) { // 하위업무가있으면
				// 전체 갯수
				int totalSubTask = vo.getSubTaskList().size();
				System.out.println("controller전체갯수:" + totalSubTask);
				System.out.println("controllery인것의 갯수 " + vo.getSubTaskCount());
				// 진행도
				double progress = ((double) vo.getSubTaskCount() / totalSubTask) * 100;

				System.out.println("소숫점" + progress);
				System.out.println("controller진행도" + progress);
				vo.setProgressPercentage((int) progress);
				System.out.println(vo.getProgressPercentage());
			}
		}

		System.out.println("myTaskUnCheckedList" + coTaskList + "개수" + coTaskList.size());
		entity = new ResponseEntity<List<CoTaskASubVO>>(coTaskList, HttpStatus.OK);
		return entity;
	}

	@RequestMapping("/main")
	public String main() {
		String url = "cooperation/main";
		return url;
	}

	@RequestMapping("/coopermain")
	public ModelAndView coopermain(ModelAndView mnv, HttpServletRequest request, SearchCriteria cri)
			throws SQLException {
		String url = "cooperation/coopermain";
		session = request.getSession();
		DoctorVO doctorLogin = (DoctorVO) session.getAttribute("doctorLogin");
		String dId = doctorLogin.getdId();

		// 참여중인 협진리스트
		Map<String, Object> dataMap = service.selectCooperList(dId, cri);
		List<JoinCooperVO> cooList = (List<JoinCooperVO>) dataMap.get("cooList");
		for (JoinCooperVO vo : cooList) {

			vo.setpRnum(vo.getpRnum().substring(0, 8));
		}

		mnv.addObject("dataMap", dataMap);

		// 특이사항
		List<IssueVO> issueList = service.selectIssueList(dId);
		for (IssueVO vo : issueList) {
			vo.setpRnum(vo.getpRnum().substring(0, 8));
		}

		mnv.addObject("issueList", issueList);

		// 내가 올린 진료에 달린 코멘트 리스트
		List<MyHistoryCommentVO> historyCommentList = service.selectHistoryComment(dId);
		mnv.addObject("historyCommentList", historyCommentList);

		// 내가받은 협진요청
		List<NotiVO> notiList = service.selectNoti(dId);
		// 응답코드 : 0이면 거절 1이면 수락 2이면 보류
		for (NotiVO vo : notiList) {
			if (vo.getResponse() == 0)
				vo.setMysetting("거절");
			if (vo.getResponse() == 1)
				vo.setMysetting("수락");
			if (vo.getResponse() == 2)
				vo.setMysetting("보류");
			System.out.println(vo.getMysetting());
		}
		mnv.addObject("notiList", notiList);

		// 내가 주치의 일 때 승인 요청 의료행위들
		List<CoDocApproveVO> approveList = service.selectapproveList(dId);
		System.out.println("내가주치의일 때 승인요청 받은 의료행위들" + approveList);
		// tn_status가 1:등록 2:수정 3:삭제
		for (CoDocApproveVO vo : approveList) {
			if (vo.getTnStatus() == 1)
				vo.setTnStatusResult("등록");
			if (vo.getTnStatus() == 1)
				vo.setTnStatusResult("수정");
			if (vo.getTnStatus() == 1)
				vo.setTnStatusResult("삭제");

			vo.setpRnum(vo.getpRnum().substring(0, 8));
		}
		mnv.addObject("approveList", approveList);

		//// 내가 주치의가 아닌 경우 요청한 사항들에 대한 결과값(업무) 환자정보 주상병 주치의 상태(수락 ,거절)
		List<DidApproveVO> myApproveList = service.selectmyapproveList(dId);
		System.out.println("내가 일반의료진일때 승인 요청한 의료행위들 " + myApproveList);

		// ta_status 1:승인 2:미승인
		for (DidApproveVO vo : myApproveList) {

			if (vo.getTaStatus() == 1)
				vo.setTaStatusResult("수락");
			if (vo.getTaStatus() == 2)
				vo.setTaStatusResult("거절");
			vo.setpRnum(vo.getpRnum().substring(0, 8));
		}
		mnv.addObject("myApproveList", myApproveList);
		mnv.addObject("dId", dId);

		mnv.setViewName(url);

		return mnv;
	}

	@RequestMapping("/significantDetail")
	public String significant_detail() {
		String url = "cooperation/significantDetail";
		return url;
	}

	@RequestMapping("/cooperationRegist")
	public String cooperation_regist(String pNo, String result, Model model) throws SQLException {
		String url = "cooperation/cooperationRegist";

		Map<String, Object> map = mediRecoService.coRegistForm(pNo);
		model.addAttribute("pastreco", map.get("pastreco"));
		model.addAttribute("patientinfo", map.get("patientinfo"));
		if (result != null) {
			if (result.equals("success")) {
				model.addAttribute("result", "success");
			} else if (result.equals("fail")) {
				model.addAttribute("result", "fail");
			}
		}

		return url;
	}

	@RequestMapping("/reservationform")
	public String reservationform() {
		String url = "cooperation/reservationform";
		return url;
	}

	@RequestMapping("/reservationModify")
	public String reservationModify() {
		String url = "cooperation/reservationModify";
		return url;
	}

	@RequestMapping("/cooperationProgress")
	public String cooperation_progress() {
		String url = "cooperation/cooperationProgress";
		return url;
	}

	@RequestMapping("/cooperationRecruit")
	public String cooperation_recruit() {
		String url = "cooperation/cooperationRecruit";
		return url;
	}

	@RequestMapping("/cooperationRequest")
	public String cooperation_request() {
		String url = "cooperation/cooperationRequest";
		return url;
	}

	@RequestMapping("/reservationDetail")
	public String reservation_detail(String taNo, Model model) throws Exception {
		String url = "cooperation/reservationDetail";

		Map<String, Object> map = mediRecoService.reservationDetail(taNo);

		model.addAttribute("coTask", map.get("coTask"));
		model.addAttribute("subCoTask", map.get("subCoTask"));
		model.addAttribute("dName", map.get("dName"));

		return url;
	}



	@RequestMapping("/historyDetail")
	public String history_detail() {
		String url = "cooperation/historyDetail";
		return url;
	}

	@RequestMapping("/doctorInvite")
	public String doctor_invite(Model model) throws Exception {
		String url = "cooperation/doctorInvite";

		List<MajorVO> list = doctorService.majorList();
		model.addAttribute("major", list);

		return url;
	}

	@RequestMapping("/doctorDetail")
	public String doctor_detail() {
		String url = "cooperation/doctordetail";
		return url;
	}

	@RequestMapping("/takeover")
	public String takeover() {
		String url = "cooperation/takeover";
		return url;
	}

	@RequestMapping("/cooperover")
	public String cooperover() {
		String url = "cooperation/cooperover";
		return url;
	}

//등록
	@RequestMapping("/approveRegistDetail")
	public String approve_regist_detail() {
		String url = "cooperation/approveReservationDetail";
		return url;
	}

	// 수정
	@RequestMapping("/approveModifyDetail")
	public String approve_modify_detail() {
		String url = "cooperation/approveModifyDetail";
		return url;
	}

	// 삭제
	@RequestMapping("/approveDeleteDetail")
	public String approve_delete_detail() {
		String url = "cooperation/approveDeleteDetail";
		return url;
	}

	// 협진 생성
	@RequestMapping("regist")
	public String regist(CoRegistCommand command, HttpSession session, RedirectAttributes rttr) throws Exception {
		String url = "redirect:cooperationRegist.do";
		DoctorVO vo = (DoctorVO) session.getAttribute("doctorLogin");
		try {
			String dId = vo.getdId();
			command.setdId(dId);
			coMedService.coRegist(command);
			rttr.addFlashAttribute("result", "success");
		} catch (Exception e) {
			rttr.addFlashAttribute("result", "fail");
		}
		return url;
	}

	@RequestMapping("getFile")
	public String getFile(String mfNo, Model model) throws Exception {
		String url = "downloadFile";

		String FileName = mediRecoService.getFile(mfNo);
		model.addAttribute("savedPath", recoFilePath);
		model.addAttribute("fileName", FileName);

		return url;

	}
	@RequestMapping("detailImg")
	public String detailImg(String mpNo,Model model ) {

		String url = "cooperation/detailImg";

		model.addAttribute("mpNo", mpNo);
		return url;

	}

}
