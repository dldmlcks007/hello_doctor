package kr.or.ddit.service;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kr.or.ddit.command.PageMaker;
import kr.or.ddit.command.SearchCriteria;
import kr.or.ddit.dao.Case_DAO;
import kr.or.ddit.dto.CaseVO;
import kr.or.ddit.dto.ChartFormVO;
import kr.or.ddit.dto.RecomVO;

public class CaseServiceImpl implements CaseService{

	private Case_DAO casedao;

	public void setCasedao(Case_DAO casedao) {
		this.casedao = casedao;
	}

	@Override
	public List<CaseVO> selectCase() throws SQLException {
		// TODO Auto-generated method stub
		return casedao.selectCase();
	}

	@Override
	public Map<String, Object> getCaseListForPage(SearchCriteria cri) throws Exception {

		Map<String, Object> map = new HashMap<String, Object>();

		List<CaseVO> caselist = casedao.selectSearchCaseList(cri);
		int totalCount = casedao.selectSearchCaseListCount(cri);
		System.out.println("searchType : " + cri.getSearchType());
		System.out.println("filter : " + cri.getUserFilter());
		System.out.println("getPage : " + cri.getPage());
		System.out.println("perPageNum : " + cri.getPerPageNum());
		System.out.println("+++++++++++++++++++++++++++++++++++++++++");
		System.out.println("+++++++++++++++++++++++++++++++++++++++++");
		System.out.println("+++++++++++++++++++++++++++++++++++++++++");
		System.out.println("+++++++++++++++++++++++++++++++++++++++++");
		System.out.println("+++++++++++++++++++++++++++++++++++++++++");
		System.out.println(cri);
		System.out.println("+++++++++++++++++++++++++++++++++++++++++");
		System.out.println("+++++++++++++++++++++++++++++++++++++++++");
		System.out.println("+++++++++++++++++++++++++++++++++++++++++");
		System.out.println("+++++++++++++++++++++++++++++++++++++++++");
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);

		map.put("caselist", caselist);
		map.put("pageMaker", pageMaker);

		return map;
	}

	@Override
	public void insertCase(CaseVO casevo) throws SQLException {

		int disNo = casedao.selectCaseSeqNextValue();
		String no = Integer.toString(disNo);
		if(disNo < 10) {
			no = "DIS00" + no;
		}else if(disNo >= 10 && disNo <= 100) {
			no = "DIS0" + no;
		}else {
			no = "DIS" + no;
		}

		casevo.setDisNo(no);

		casedao.insertCase(casevo);
		casedao.insertSub(casevo);

	}

	@Override
	public CaseVO detailCase(String disNo) throws SQLException {
		CaseVO casevo = casedao.selectCaseByNo(disNo);
		casedao.increaseViewCnt(disNo);

		return casevo;
	}

	@Override
	public void deleteCase(String disNo) throws SQLException {
		casedao.deleteCase(disNo);


	}

	@Override
	public void updateCase(CaseVO casevo) throws SQLException {
		casedao.updateCase(casevo);
		casedao.updateSubCase(casevo);
	}

	@Override
	public CaseVO getCaseForModify(String disNo) throws SQLException {
		return casedao.selectCaseByNo(disNo);
	}

	@Override
	public Map<String, Object> mainBottomShow(CaseVO casevo, String MaName) throws SQLException {
		Map<String, Object> map = new HashMap<String, Object>();
		List<CaseVO> bottomList = casedao.mainBottomShow(casevo);
		List<CaseVO> major = casedao.selectMajor(MaName);
		List<CaseVO> top = casedao.mainTop();
		for(int i = 0; i < top.size(); i++) {
			top.get(i).setDisCnt(top.get(i).getDisCnt());
			top.get(i).setRecom(top.get(i).getRecom() * 2);
			top.get(i).setReply(top.get(i).getReply() * 2);

			top.get(i).setTotal(top.get(i).getDisCnt() + (top.get(i).getRecom() * 2) + (top.get(i).getReply() * 2));
		}

		map.put("top", top);
		map.put("major", major);
		map.put("bottomList", bottomList);
		return map;
	}

	class sort implements Comparator<CaseVO>{
		@Override
		public int compare(CaseVO o1, CaseVO o2) {
			Integer i = new Integer(o1.getTotal());
			return i.compareTo(o2.getTotal());
		}
	}

	@Override
	public RecomVO recomSelect(RecomVO recomvo) throws SQLException {
		RecomVO recom = null;
		recom = casedao.recomSelect(recomvo);
		return recom;
	}

	@Override
	public void recomInsert(RecomVO recomvo) throws SQLException {
		casedao.recomInsert(recomvo);

	}

	@Override
	public void recomDelete(RecomVO recomvo) throws SQLException {
		casedao.recomDelete(recomvo);

	}










}
