package kr.or.ddit.service;

import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import kr.or.ddit.dao.CoTaskDAO;
import kr.or.ddit.dao.DoctorDAO;
import kr.or.ddit.dao.MediRecoDAO;
import kr.or.ddit.dao.MyOrderDAO;
import kr.or.ddit.dto.ChartFormVO;
import kr.or.ddit.dto.CoTaskVO;
import kr.or.ddit.dto.MediRecoVO;
import kr.or.ddit.dto.MyDrugVO;
import kr.or.ddit.dto.MyOrderListVO;
import kr.or.ddit.dto.PatientVO;
import kr.or.ddit.dto.PrescriptVO;
import kr.or.ddit.dto.SubTaskVO;
import kr.or.ddit.dto.SubDVO;
import kr.or.ddit.util.MakeSequence;

public class MediRecoServiceImpl implements MediRecoService {
	private MediRecoDAO mediRecodao;
	private CoTaskDAO coTaskdao;
	private MyOrderDAO myOrderdao;
	private DoctorDAO doctorDAO;

	public void setMediRecodao(MediRecoDAO mediRecodao) {
		this.mediRecodao = mediRecodao;
	}
	public void setCoTaskdao(CoTaskDAO coTaskdao) {
		this.coTaskdao = coTaskdao;
	}
	public void setMyOrderdao(MyOrderDAO myOrderdao) {
		this.myOrderdao = myOrderdao;
	}
	public void setDoctorDAO(DoctorDAO doctorDAO) {
		this.doctorDAO = doctorDAO;
	}
	@Override
	public Map<String, Object> selectAllReco(String dId) throws Exception {
		List<ChartFormVO> result = new ArrayList<ChartFormVO>();
		Map<String,Object> map = new HashMap<String, Object>();
		List<ChartFormVO> medilist =mediRecodao.selectAllReco(dId);
		List<ChartFormVO> colist =coTaskdao.selectAllReco(dId);
		List<MyOrderListVO> orderlist = myOrderdao.myorderList(dId);
		for(int i =0; i< medilist.size(); i++) {

			result.add(medilist.get(i));
		}
		for(int i = 0; i<colist.size(); i++) {
			result.add(colist.get(i));
		}
		Collections.sort(result, new SortByDate());

		for(int i = 0; i<result.size(); i++) {


		}
		map.put("patient", result);
		map.put("orderset", orderlist);


		return map;
	}
    class SortByDate implements Comparator<ChartFormVO> {

		@Override
		public int compare(ChartFormVO o1, ChartFormVO o2) {
			// TODO Auto-generated method stub
			return ( o1.getReservedate()).compareTo((String) o2.getReservedate());
		}
    }
	@Override
	public Map<String, Object> selectOneReco(String pNo, String dId) throws Exception {
		List<ChartFormVO> result = new ArrayList<ChartFormVO>();
		Map<String,Object> map = new HashMap<String, Object>();
		List<ChartFormVO> medilist =mediRecodao.selectAllReco(dId);
		List<ChartFormVO> colist =coTaskdao.selectAllReco(dId);
		List<MyOrderListVO> orderlist = myOrderdao.myorderList(dId);
		List<MediRecoVO> pastreco = mediRecodao.pastmedireco(pNo);
		PatientVO patientinfo = mediRecodao.patientinfo(pNo);

		//나이 구하기
		String pRnum = patientinfo.getpRnum();
		pRnum = age(pRnum);
		patientinfo.setpRnum(pRnum);

		//보험가입여부
		String pInsurance = patientinfo.getpInsurance();
		if(pInsurance.equals("Y")) {
			pInsurance = "의료보험가입";
		}else {
			pInsurance = "보험미가입";
		}
		patientinfo.setpInsurance(pInsurance);
		//재진 여부 확인
		if(pastreco == null) {
			patientinfo.setpAddress("초진");
		}else {
			patientinfo.setpAddress("재진");
		}


		if(medilist != null) {
		for(int i =0; i< medilist.size(); i++) {

			result.add(medilist.get(i));
		}
		}
		if(colist != null) {
		for(int i = 0; i<colist.size(); i++) {
			result.add(colist.get(i));
		}
		}
		Collections.sort(result, new SortByDate());
		result.remove(0);
		map.put("patient", result);
		map.put("orderset", orderlist);
		map.put("pastreco", pastreco);
		map.put("patientinfo",patientinfo);
		return map;
	}
	public String age(String rnum) {

		int age = Integer.parseInt(rnum.substring(0,2));
		char ch = rnum.charAt(7);
		 LocalDate current_date = LocalDate.now();
		 int current_Year = current_date.getYear();

		if(ch=='1' || ch=='2') {
			age = current_Year-(1900+age)+1;
		}else if(ch=='3' || ch=='4') {
			age = current_Year-(2000+age)+1;
		}
		return age+"";
	}

	@Override
	public String docuinput(String dId) throws SQLException {
		String result = mediRecodao.docuinput(dId);

		return result;
	}

	@Override
	public Map<String, Object> pastreco(String mNo) throws SQLException {
		Map<String,Object> map = new HashMap<String, Object>();
		MediRecoVO pastsymptom =  mediRecodao.pastsymptom(mNo);
		List<PrescriptVO> orderdruglist =  myOrderdao.pastdrug(mNo);
		List<SubDVO> sub_dlist = myOrderdao.pastsubD(mNo);
		map.put("pastsymptom", pastsymptom);
		map.put("orderdruglist", orderdruglist);
		map.put("sub_dlist", sub_dlist);
		return map;
	}

	@Override
	public String registTempPic(String name) throws SQLException {
		int num = mediRecodao.gettemppdsSeq();

		String seq = MakeSequence.makeSequence("T", num);
		String result = name+seq+".png";

		mediRecodao.registTempPic(result);

		return result;

	}

	@Override
	public Map<String, Object> reservationDetail(String taNo) throws Exception {
			Map<String,Object> map = new HashMap<String,Object>();
			CoTaskVO vo = coTaskdao.mycotask(taNo);
			List<SubTaskVO> list = coTaskdao.mySubCoTask(taNo);
			String dName = doctorDAO.searchDoctorName(vo.getdId());
			map.put("coTask", vo);
			map.put("subCoTask", list);
			map.put("dName", dName);



		return map;
	}
	@Override
	public String durCheck( List<String> drugNm) throws SQLException {
		String result = "1";
		System.out.println(drugNm);
		for(String drug : drugNm) {
			String checkresult = mediRecodao.durCheck(drug);
			System.out.println(checkresult);
			if(!checkresult.equals("0")) {
				return result = "0";
			}
		}
		return result;
	}
	@Override
	public List<ChartFormVO> watingList(String dId) throws SQLException {

		List<ChartFormVO> result = mediRecodao.selectAllReco(dId);

		return result;
	}
	@Override
	public boolean overDose(String drugNm, int quantity) throws SQLException {
		boolean result = true;

		int limit = mediRecodao.overDose(drugNm);

		if(limit < quantity ) {
			result = false;
		}

		return result;
	}

	}
